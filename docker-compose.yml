services:
  db:
    image: postgres:17
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  db-migration:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: |
      python -m data_rentgen.db.migrations upgrade head
    env_file: .env.docker
    depends_on:
      db:
        condition: service_healthy

  db-create-partitions:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: |
      python -m data_rentgen.db.scripts.create_partitions
    env_file: .env.docker
    depends_on:
      db-migration:
        condition: service_completed_successfully

  db-refresh-views:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: |
      python -m data_rentgen.db.scripts.refresh_analytic_views
    env_file: .env.docker
    depends_on:
      db-migration:
        condition: service_completed_successfully
    profiles:
      - analytics
      - all

  db-cleanup-partitions:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: |
      python -m data_rentgen.db.scripts.cleanup_partitions truncate --keep-after $(date --date='-1year' '+%Y-%m-%d')
    env_file: .env.docker
    depends_on:
      db-migration:
        condition: service_completed_successfully
    profiles:
      - cleanup
      - all

  db-seed:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: |
      python -m data_rentgen.db.scripts.seed
    env_file: .env.docker
    depends_on:
      db-migration:
        condition: service_completed_successfully
    profiles:
      - seed
      - all

  server:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: python -m data_rentgen.server --host 0.0.0.0 --port 8000
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 8000:8000
    # PROMETHEUS_MULTIPROC_DIR is required for multiple workers, see:
    # https://prometheus.github.io/client_python/multiprocess/
    environment:
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus-metrics
    # tmpfs dir is cleaned up each container restart
    tmpfs:
      - /tmp/prometheus-metrics:mode=1777
    healthcheck:
      test: [CMD-SHELL, curl -f http://localhost:8000/monitoring/ping]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    profiles:
      - server
      - frontend
      - all

  broker:
    image: bitnami/kafka:3.9
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 9093:9093
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: [CMD-SHELL, kafka-topics.sh --bootstrap-server 127.0.0.1:9095 --list]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - broker
      - consumer
      - http2kafka
      - all

  consumer:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: python -m data_rentgen.consumer --host 0.0.0.0 --port 8001
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 8001:8001
    healthcheck:
      test: [CMD-SHELL, curl -f http://localhost:8001/internal/healthcheck/liveness]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      broker:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    profiles:
      - consumer
      - all

  frontend:
    image: mtsrus/data-rentgen-ui:${VERSION:-latest}
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 3000:3000
    depends_on:
      server:
        condition: service_healthy
    profiles:
      - frontend
      - all

  http2kafka:
    image: mtsrus/data-rentgen:${VERSION:-latest}
    command: python -m data_rentgen.http2kafka --host 0.0.0.0 --port 8002
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - 8002:8002
    healthcheck:
      test: [CMD-SHELL, curl -f http://localhost:8002/monitoring/ping]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      broker:
        condition: service_healthy
    profiles:
      - http2kafka
      - all

volumes:
  postgres_data:
  kafka_data:
