[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "data-rentgen"
version = "0.4.0"
license = "Apache-2.0"
description = "Data.Rentgen REST API + Kafka consumer"
authors = ["DataOps.ETL <onetools@mts.ru>"]
readme = "README.rst"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
keywords = ["Lineage", "FastAPI", "REST", "FastStream"]
packages = [
    { include = "data_rentgen" },
]
include = [
    {path = "data_rentgen/py.typed"},
    {path = "data_rentgen/**/*.yml"},
    {path = "data_rentgen/**/*.ini"},
]

[tool.poetry.urls]  # Optional
"Homepage" = "https://github.com/MobileTeleSystems/data-rentgen"
"Documentation" = "https://data-rentgen.readthedocs.io/"
"Source" = "https://github.com/MobileTeleSystems/data-rentgen"
"CI/CD" = "https://github.com/MobileTeleSystems/data-rentgen/actions"
"Tracker" = "https://github.com/MobileTeleSystems/data-rentgen/issues"

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.11.7"
typing-extensions = "^4.14.1"
pydantic-settings = {version = "^2.10.1", optional = true}
alembic = {version = "^1.16.2", optional = true}
sqlalchemy = {version = "^2.0.41", optional = true}
sqlalchemy-utils = {version = ">=0.41.2,<0.43.0", optional = true}
greenlet = {version = "^3.1.1", optional = true}
pyyaml = {version = "^6.0.2", optional = true}
python-json-logger = {version = "^3.3.0", optional = true}
coloredlogs = {version = "^15.0.1", optional = true}
uuid6 = {version = "^2025.0.0", optional = true}
python-dateutil = {version = "^2.9.0.post0", optional = true}
fastapi = {version = ">=0.115.14,<0.117.0", optional = true}
starlette = {version = ">=0.46.2,<0.48.0", optional = true}
starlette-exporter = {version = "^0.23.0", optional = true}
uvicorn = {version = "^0.35.0", optional = true}
asyncpg = {version = "^0.30.0", optional = true}
asgi-correlation-id = {version = "^4.3.4", optional = true}
faststream = {extras = ["kafka", "cli"], version = "^0.5.44", optional = true}
# used by aiokafka for LZ4, Snappy, ZSTD compression algorithms
cramjam = {version = "^2.10.0", optional = true}
packaging = {version = "^25.0", optional = true}
itsdangerous = {version = "^2.2.0", optional = true}
python-multipart = {version = "^0.0.20", optional = true}
python-keycloak = {version = "^5.6.0", optional = true}
pyjwt = {version = "^2.10.1 ", optional = true}
gssapi = {version = "^1.9.0", optional = true}
faker = {version = "^37.4.2", optional = true}
cachetools = {version="^6.1.0", optional = true}

[tool.poetry.extras]
server = [
  "fastapi",
  "starlette",
  "uvicorn",
  "starlette-exporter",
  "asgi-correlation-id",
  "pydantic-settings",
  "alembic",
  "sqlalchemy",
  "sqlalchemy-utils",
  "greenlet",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "uuid6",
  "python-dateutil",
  "packaging",
  "pyjwt",
  "itsdangerous",
  "python-multipart",
  "python-keycloak",
  "cachetools",
]
consumer = [
  "faststream",
  "cramjam",
  "pydantic-settings",
  "alembic",
  "sqlalchemy",
  "sqlalchemy-utils",
  "greenlet",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "uuid6",
  "python-dateutil",
  "packaging",
]
http2kafka = [
  "fastapi",
  "starlette",
  "uvicorn",
  "starlette-exporter",
  "asgi-correlation-id",
  "pydantic-settings",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "uuid6",
  "packaging",
  "faststream",
  "cramjam",
  "cachetools",
]
postgres = [
  "asyncpg",
]
gssapi = [
  "gssapi",
]
seed = [
  "faker"
]

[tool.poetry.group.test.dependencies]
pytest = "^8.4.1"
httpx = "^0.28.1"
# TODO: remove version limit after fixing https://github.com/pytest-dev/pytest-asyncio/issues/706
pytest-asyncio = "^0.21.1"
pytest-randomly = "^3.16.0"
pytest-deadfixtures = "^2.2.1"
pytest-rerunfailures = ">=15.1,<17.0"
coverage = "^7.9.2"
psycopg2-binary = "^2.9.10"
gevent = "^25.5.1"
deepdiff = "^8.5.0"
respx = "^0.22.0"
dirty_equals = "^0.9.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
mypy = "^1.15.0"
sqlalchemy = {extras = ["mypy"], version = "^2.0.41"}
types-pyyaml = "^6.0.12"
types-python-dateutil = "^2.9.0"
types-jwcrypto = "^1.5.0"
types-cachetools = "^6.1.0"

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = "^2.2.0"
numpydoc = "^1.9.0"
sphinx = "^8.1.3"
furo = ">=2024.8.6,<2026.0.0"
sphinx-copybutton = "^0.5.2"
sphinxcontrib-towncrier = "^0.5.0a0"
towncrier = "^24.8.0"
sphinx-issues = "^5.0.1"
sphinx-design = "^0.6.1"
sphinx-favicon = "^1.0.1"
sphinx-last-updated-by-git = "^0.3.8"
# uncomment after https://github.com/zqmillet/sphinx-plantuml/pull/4
# sphinx-plantuml = "^1.0.0"
sphinx-argparse = "^0.5.2"
sphinx-tabs = "^3.4.7"

[tool.poetry_bumpversion.file."data_rentgen/__init__.py"]
search = '_raw_version = "{current_version}"'
replace = '_raw_version = "{new_version}"'

[tool.poetry_bumpversion.file."docs/conf.py"]
search = 'ver = Version.parse("{current_version}")'
replace = 'ver = Version.parse("{new_version}")'

[tool.pytest.ini_options]
markers = [
    "server: tests for server (require running database)",
    "consumer: tests for consumer (require running database and kafka)",
    "http2kafka: tests for consumer (require running database and kafka)",
    "db: tests for db structure and migrations",
    "lineage: tests for lineage endpoints (require running database)"
]

[tool.coverage.paths]
source = ["data_rentgen"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
concurrency = ["gevent"]
omit = [
  "tests/*",
]
data_file = "reports/.coverage"

[tool.coverage.report]
precision = 2
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if .*debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if logger.isEnabledFor",
  "if sys.version_info",
  "@(abc\\.)?abstractmethod",
  "\\.\\.\\.",
  "def downgrade\\(\\)",
]

[tool.ruff]
target-version = "py310"
line-length = 120
extend-exclude = ["docs/", "Makefile"]

[tool.ruff.lint]
select = ["ALL"]
# TODO: Optionally remove from ignore later: RUF005, TC001-003
ignore = ["ARG", "ANN", "D", "COM812", "TD", "FIX002", "RUF005"]

[tool.ruff.lint.per-file-ignores]
"data_rentgen/server/services/*" = ["PLR0913"]
"data_rentgen/server/schemas/*" = ["TC"]
"data_rentgen/server/middlewares/*" = ["TC"]
"data_rentgen/dto/*" = ["TC"]
"data_rentgen/server/providers/auth/*" = ["FA102"]
"data_rentgen/server/api/*" = ["B008"]
"data_rentgen/db/utils/*" = ["INP001"]
"data_rentgen/db/utils/uuid.py" = ["A005"]
"data_rentgen/db/scripts/*" = ["TC"]
"data_rentgen/db/repositories/*" = ["TC", "PLR0913"]
"data_rentgen/db/models/*" = ["TC"]
"data_rentgen/db/migrations/*" = ["INP001", "E501", "S608"]
"data_rentgen/consumer/*" = ["TC", "B008"]
"data_rentgen/openlineage/*" = ["N815"]
"data_rentgen/utils/uuid.py" = ["A005"]
"data_rentgen/logging/*" = ["A005"]


"tests/*" = ["S", "A", "E501", "FBT001", "PD901", "SIM300", "PLR0913", "PLR2004",  "SLF001", "RET504", "PLR0915"]
"tests/test_server/fixtures/*" = ["INP001"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "list"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[[tool.mypy.overrides]]
module=["sqlalchemy_utils.*"]
follow_untyped_imports = true

[[tool.mypy.overrides]]
module=["aiokafka.*"]
follow_untyped_imports = true

[tool.darglint]
docstring_style = "sphinx"

[tool.codespell]
exclude-file = "poetry.lock"
ignore-words-list = "selectin"

[tool.towncrier]
name = "Data.Rentgen"
package = "data_rentgen"
filename = "docs/changelog/NEXT_RELEASE.rst"
directory = "docs/changelog/next_release/"
title_format = "{version} ({project_date})"
issue_format = ":issue:`{issue}`"

[[tool.towncrier.type]]
directory = "breaking"
name = "Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "significant"
name = "Significant Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "improvement"
name = "Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "dependency"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Doc only Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Misc"
showcontent = true
