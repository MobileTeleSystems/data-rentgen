[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "data-rentgen"
version = "0.0.1"
license = "Apache-2.0"
description = "Data.Rentgen REST API + Kafka consumer"
authors = ["DataOps.ETL <onetools@mts.ru>"]
readme = "README.rst"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
keywords = ["Lineage", "FastAPI", "REST", "FastStream"]
packages = [
    { include = "data_rentgen" },
]
include = [
    {path = "data_rentgen/py.typed"},
    {path = "data_rentgen/**/*.yml"},
    {path = "data_rentgen/**/*.ini"},
]

[tool.poetry.urls]  # Optional
"Homepage" = "https://github.com/MobileTeleSystems/data-rentgen"
"Documentation" = "https://data-rentgen.readthedocs.io/"
"Source" = "https://github.com/MobileTeleSystems/data-rentgen"
"CI/CD" = "https://github.com/MobileTeleSystems/data-rentgen/actions"
"Tracker" = "https://github.com/MobileTeleSystems/data-rentgen/issues"

[tool.poetry.dependencies]
python = "^3.10"
# https://github.com/pydantic/pydantic/issues/10964
pydantic = "~2.8.2"
typing-extensions = "^4.12.2"
pydantic-settings = {version = "^2.7.0", optional = true}
alembic = {version = "^1.14.0", optional = true}
sqlalchemy = {version = "^2.0.35", optional = true}
sqlalchemy-utils = {version = "^0.41.2", optional = true}
greenlet = {version = "^3.1.1", optional = true}
pyyaml = {version = "^6.0.2", optional = true}
python-json-logger = {version = "^3.2.1", optional = true}
coloredlogs = {version = "^15.0.1", optional = true}
uuid6 = {version = "^2024.7.10", optional = true}
python-dateutil = {version = "^2.9.0.post0", optional = true}
fastapi = {version = "^0.115.6", optional = true}
starlette = {version = "^0.41.2", optional = true}
starlette-exporter = {version = "^0.23.0", optional = true}
uvicorn = {version = "^0.34.0", optional = true}
asyncpg = {version = "^0.30.0", optional = true}
asgi-correlation-id = {version = "^4.3.4", optional = true}
faststream = {extras = ["kafka", "cli"], version = "^0.5.33", optional = true}
# used by aiokafka for LZ4, Snappy, ZSTD compression algorithms
cramjam = {version = "^2.9.1", optional = true}
packaging = {version = "^24.2", optional = true}
itsdangerous = {version = "^2.2.0", optional = true}
python-multipart = {version = "^0.0.20", optional = true}
python-keycloak = {version = "^5.1.1", optional = true}
pyjwt = {version = "^2.10.1 ", optional = true}

[tool.poetry.extras]
server = [
  "fastapi",
  "starlette",
  "uvicorn",
  "starlette-exporter",
  "asgi-correlation-id",
  "pydantic-settings",
  "alembic",
  "sqlalchemy",
  "sqlalchemy-utils",
  "greenlet",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "uuid6",
  "python-dateutil",
  "packaging",
  "pyjwt",
  "itsdangerous",
  "python-multipart",
  "python-keycloak",
]
consumer = [
  "faststream",
  "cramjam",
  "pydantic-settings",
  "alembic",
  "sqlalchemy",
  "sqlalchemy-utils",
  "greenlet",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "uuid6",
  "python-dateutil",
  "packaging",
]
postgres = [
  "asyncpg",
]

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
httpx = "^0.27.0"
# TODO: remove version limit after fixing https://github.com/pytest-dev/pytest-asyncio/issues/706
pytest-asyncio = "^0.21.1"
pytest-randomly = "^3.16.0"
pytest-deadfixtures = "^2.2.1"
pytest-rerunfailures = "^15.0"
coverage = "^7.6.9"
psycopg2-binary = "^2.9.9"
gevent = "^24.11.1"
deepdiff = "^8.1.1"
respx = "^0.22.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
mypy = "^1.14.0"
black = "^24.10.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
bandit = "^1.7.9"
sqlalchemy = {extras = ["mypy"], version = "^2.0.32"}
wemake-python-styleguide = "^0.19.2"
flake8-pyproject = "^1.2.3"
types-pyyaml = "^6.0.12"
types-python-dateutil = "^2.9.0"
types-jwcrypto = "^1.5.0.20241221"
icecream = "^2.1.3"

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = "^2.2.0"
numpydoc = "^1.8.0"
sphinx = "^8.1.3"
furo = "^2024.7.18"
sphinx-copybutton = "^0.5.2"
sphinxcontrib-towncrier = "^0.4.0a0"
# TODO: remove upper limit after https://github.com/sphinx-contrib/sphinxcontrib-towncrier/issues/92
towncrier = {version = ">=23.11,<24.7"}
sphinx-issues = "^5.0.0"
sphinx-design = "^0.6.1"
sphinx-favicon = "^1.0.1"
sphinx-last-updated-by-git = "^0.3.8"
# uncomment after https://github.com/zqmillet/sphinx-plantuml/pull/4
# sphinx-plantuml = "^1.0.0"
sphinx-argparse = "^0.5.2"

[tool.poetry.plugins."tricoder_package_spy.register"]
"data-rentgen" = "data_rentgen"

[tool.poetry_bumpversion.file."data_rentgen/__init__.py"]
search = '_raw_version = "{current_version}"'
replace = '_raw_version = "{new_version}"'

[tool.poetry_bumpversion.file."docs/conf.py"]
search = 'ver = Version.parse("{current_version}")'
replace = 'ver = Version.parse("{new_version}")'

[tool.pytest.ini_options]
markers = [
    "server: tests for server (require running database)",
    "consumer: tests for consumer (require running database)",
    "db: tests for db",
    "lineage: tests for lineage endpoints (require running database)"
]

[tool.coverage.paths]
source = ["data_rentgen"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
concurrency = ["gevent"]
omit = [
  "tests/*",
]
data_file = "reports/.coverage"

[tool.coverage.report]
precision = 2
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if .*debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if logger.isEnabledFor",
  "if sys.version_info",
  "@(abc\\.)?abstractmethod",
  "\\.\\.\\.",
  "def downgrade\\(\\)",
]

[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]
include = "\\.pyi?$"
exclude = "(\\.eggs|\\.git|\\.mypy_cache|\\.tox|\\.venv|_build|buck-out|build|dist)"

[tool.isort]
profile = "black"
known_first_party = ["data_rentgen", "tests"]

[tool.mypy]
python_version = "3.10"
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
strict_optional = true

[[tool.mypy.overrides]]
module = "sqlalchemy_utils"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "starlette_exporter"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "keycloak.*"
ignore_missing_imports = true

[tool.autoflake]
imports = ["tests", "app"]
ignore-init-module-imports = true
remove-unused-variables = true

[tool.darglint]
docstring_style = "sphinx"

[tool.codespell]
exclude-file = "poetry.lock"
ignore-words-list = "selectin"

[tool.flake8]
jobs = 4
# We don't control ones who use our code
i-control-code = false
# Max of noqa in a module
max-noqa-comments = 10
max-annotation-complexity = 4
max-returns = 6
max-awaits = 8
max-local-variables = 20
max-name-length = 60
# Max of expressions in a function
max-expressions = 15
# Max args in a function
max-arguments = 15
# Max classes and functions in a single module
max-module-members = 35
max-import-from-members = 35
max-methods = 25
# Max line complexity measured in AST nodes
max-line-complexity = 24
# Max Jones Score for a module: the median of all lines complexity sum
max-jones-score = 15
# Max amount of cognitive complexity per function
max-cognitive-score = 20
# Max amount of cognitive complexity per module
max-cognitive-average = 25
max-imports = 25
max-imported-names = 50
# Max of expression usages in a module
max-module-expressions = 15
# Max of expression usages in a function
max-function-expressions = 15
max-base-classes = 5
max-decorators = 6
# Max of repeated string constants in your modules
max-string-usages = 15
max-try-body-length = 15
max-asserts = 15
# Max number of access level in an expression
max-access-level = 6
# maximum number of public instance attributes
max-attributes = 20

max-line-length = 120
max-doc-length = 120

# https://pypi.org/project/flake8-quotes/
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

# https://wemake-python-stylegui.de/en/latest/pages/usage/formatter.html
show-source = true
# Print total number of errors
count = true
statistics = true

exclude = [
  ".tox",
  "migrations",
  "dist",
  "build",
  "hadoop_archive_plugin",
  "virtualenv",
  "venv",
  "venv36",
  "ve",
  ".venv",
  "tox.ini",
  "docker",
  "Jenkinsfile",
  "dags",
  "setup.py",
  "docs"
]
rst-directives = [
  "autosummary",
  "data",
  "currentmodule",
  "deprecated",
  "glossary",
  "moduleauthor",
  "plot",
  "testcode",
  "versionadded",
  "versionchanged"
]
# https://github.com/peterjc/flake8-rst-docstrings/pull/16
rst-roles = [
  "attr",
  "class",
  "func",
  "meth",
  "mod",
  "obj",
  "ref",
  "term",
  "py:func",
  "py:mod"
]

ignore = [
  "ANN",
  "FI1",
# Found upper-case constant in a class: DB_URL
  "WPS115",
# Found statement that has no effect
  "WPS428",
# Found `f` string [opinionated]
  "WPS305",
# Found class without a base class (goes against PEP8) [opinionated]
  "WPS306",
# Found line break before binary operator [goes against PEP8] [opinionated]
  "W503",
# Found multiline conditions [opinionated]
  "WPS337",
# Found mutable module constant [opinionated]
  "WPS407",
# Found empty module:
  "WPS411",
# Found nested import [opinionated]
  "WPS433",
# Found negated condition [opinionated]
  "WPS504",
# Found implicit `.get()` dict usage
  "WPS529",
# Docstrings [opinionated]
  "D",
# string does contain unindexed parameters'
  "P101",
  "P103",
# Found implicit string concatenation [optional]
  "WPS326",
# Found wrong function call: locals'
  "WPS421",
# module level import not at top of file
  "E402",
# Document or section may not begin with a transition.
  "RST399",
# Error in "code" directive
  "RST307",
# Found `%` string formatting
  "WPS323",
# doc line too long
  "W505",
# line too long
  "E501",
# Found wrong module name: util
  "WPS100",
# Found wrong keyword: pass
  "WPS420",
# Found incorrect node inside `class` body: pass
  "WPS604",
# Found wrong variable name: data
  "WPS110",
# Found builtin shadowing: id
  "WPS125",
# Found too short name: e < 2
  "WPS111",
# Found a line that starts with a dot
  "WPS348",
# first argument of a method should be named 'self'
  "N805",
# Found `finally` in `try` block without `except`
  "WPS501",
# Wrong multiline string usage: textwrap.dedent + multiline comment
  "WPS462",
# Found incorrect multi-line string: 3-quoted docstring with just one line
  "WPS322",
# https://github.com/wemake-services/wemake-python-styleguide/issues/2847
# E704 multiple statements on one line (def)
  "E704",
# WPS220 Found too deep nesting: 34 > 20
  "WPS220",
# Found wrong metadata variable: __all__
  "WPS410",
# constant 'UUID' imported as non constant 'UUIDv7'
  "N811",
# Found subclassing a builtin: str
  "WPS600",
# Found underscored number: 5_000_000
  "WPS303",
# Found complex default value: Depends(some)
  "WPS404",
# Do not perform function calls in argument defaults: Depends(some)
  "B008",
]

per-file-ignores = [
# WPS102 Found incorrect module name pattern
# WPS432 Found magic number: 255
  "data_rentgen/db/*.py:WPS102,WPS432",
# WPS237 Found a too complex `f` string
  "data_rentgen/server/exceptions/*.py:WPS237",
# WPS441 Found control variable used after block: input
  "data_rentgen/server/services/lineage.py:WPS441",
# N815 variable 'openlineageAdapterVersion' in class scope should not be mixedCase
  "data_rentgen/consumer/openlineage/*.py:N815",
# WPS432 Found magic number: 50
  "data_rentgen/*settings*.py:WPS432",
# TAE001 too few type annotations
# WPS231 Found function with too much cognitive complexity
# S101 Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
# WPS442 Found outer scope names shadowing
# WPS432 Found magic number
# WPS334 Found reversed complex comparison
# WPS218 Found too many `assert` statements: 19 > 15
# WPS226 Found string literal over-use: value > 15
# WPS118 Found too long name:
  "*tests/*.py:TAE001,WPS231,S101,WPS442,WPS432,WPS334,WPS218,WPS226,WPS118",
]

[tool.towncrier]
name = "Data.Rentgen"
package = "data_rentgen"
filename = "docs/changelog/NEXT_RELEASE.rst"
directory = "docs/changelog/next_release/"
title_format = "{version} ({project_date})"
issue_format = ":issue:`{issue}`"

[[tool.towncrier.type]]
directory = "breaking"
name = "Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "significant"
name = "Significant Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "improvement"
name = "Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "dependency"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Doc only Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Misc"
showcontent = true
